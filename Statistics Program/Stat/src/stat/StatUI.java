/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package stat;

import java.awt.Font;
import java.util.*;

/**
 *
 * @author Dale
 */
public class StatUI extends javax.swing.JFrame {

    /**
     * Creates new form StatUI
     */
    public StatUI() {
        initComponents();
        data.setFont(new Font("Serif", Font.PLAIN, 24));
        goButton.setFont(new Font("Serif", Font.PLAIN, 30));
        results.setFont(new Font("Serif", Font.PLAIN, 24));
        data2.setFont(new Font("Serif", Font.PLAIN, 22));
        data2.getTableHeader().setFont(new Font("Serif", Font.PLAIN, 22));
        go2.setFont(new Font("Serif", Font.PLAIN, 30));
        results2.setFont(new Font("Serif", Font.PLAIN, 24));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        tab = new javax.swing.JTabbedPane();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        data = new javax.swing.JTextArea();
        goButton = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        results = new javax.swing.JTextArea();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        data2 = new javax.swing.JTable();
        jScrollPane4 = new javax.swing.JScrollPane();
        results2 = new javax.swing.JTextArea();
        go2 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        tab.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N

        data.setColumns(20);
        data.setRows(5);
        jScrollPane1.setViewportView(data);

        goButton.setText("GO!");
        goButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                goButtonActionPerformed(evt);
            }
        });

        results.setEditable(false);
        results.setColumns(20);
        results.setRows(5);
        results.setText("Enter datapoints above and hit GO!");
        jScrollPane2.setViewportView(results);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 534, Short.MAX_VALUE)
                    .addComponent(jScrollPane2)
                    .addComponent(goButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 185, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(goButton, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 713, Short.MAX_VALUE)
                .addContainerGap())
        );

        tab.addTab("Individual Values", jPanel3);

        data2.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        data2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Values", "Frequency"
            }
        ));
        data2.setRowHeight(24);
        jScrollPane3.setViewportView(data2);
        if (data2.getColumnModel().getColumnCount() > 0) {
            data2.getColumnModel().getColumn(0).setResizable(false);
            data2.getColumnModel().getColumn(1).setResizable(false);
        }

        results2.setEditable(false);
        results2.setColumns(20);
        results2.setRows(5);
        results2.setText("Enter values on the left and frequency on the right,\nthen hit GO!");
        jScrollPane4.setViewportView(results2);

        go2.setText("GO!");
        go2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                go2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(go2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 534, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 185, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(go2, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 713, Short.MAX_VALUE)
                .addContainerGap())
        );

        tab.addTab("Frequency Table", jPanel1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(tab, javax.swing.GroupLayout.PREFERRED_SIZE, 569, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(tab)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void goButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_goButtonActionPerformed
        // TODO add your handling code here:
        String in = data.getText().replaceAll("[^0-9-.]+", " ");
        in = in.replaceAll("\\s+", " ");
        in = in.trim();

        String[] listString = in.split(" ");
        double[] list = new double[listString.length];

        for (int i = 0; i < list.length; i++) {
            double num;
            try {
                num = Double.parseDouble(listString[i]);
                list[i] = num;
            } catch (NumberFormatException e) {
            }
        }

        Arrays.sort(list);
        // all methods require sorting

        double meanNums = mean(list);
        double medianNums = median(list);
        double[] modeNums = mode(list);
        String spreadNums = spread(list);
        double rangeNums = range(list);
        double q1Nums = q1(list);
        double q3Nums = q3(list);
        double iqrNums = iqr(list);
        double outlierMinNums = outlierMin(list);
        double outlierMaxNums = outlierMax(list);
        double[] outlierNums = outliers(list);

        String out = "[";
        for (int i = 0; i < list.length; i++) {
            out += list[i];
            if (i < list.length - 1) {
                out += ", ";
            }
        }
        out += "]\n";

        out += ("n = " + list.length);

        out += ("\n\nCENTER\n");
        out += String.format("Mean: %.2f\n", meanNums);
        out += String.format("Median: %.2f\n", medianNums);
        if (modeNums.length == 0) {
            out += "There is no mode";
        } else if (modeNums.length == 1) {
            out += "Mode:";
        } else {
            out += "Modes:";
        }
        for (int i = 0; i < modeNums.length; i++) {
            out += (" " + modeNums[i]);
            if (i < modeNums.length - 1) {
                out += ",";
            }
        }
        out += "\n\n";

        out += "SPREAD\n";
        out += (spreadNums + "\n");
        out += String.format("Range: %.2f\n", rangeNums);
        out += String.format("Q1: %.2f\n", q1Nums);
        out += String.format("Q3: %.2f\n", q3Nums);
        out += String.format("Interquartile Range: %.2f\n\n", iqrNums);

        out += "OUTLIERS\n";
        out += String.format("Outside of the interval [%.2f, %.2f]\n", outlierMinNums, outlierMaxNums);
        if (outlierNums.length == 0) {
            out += "There are no outliers";
        } else {
            out += "Outliers:";
        }
        for (int i = 0; i < outlierNums.length; i++) {
            out += (" " + outlierNums[i]);
            if (i < outlierNums.length - 1) {
                out += ",";
            }
        }
        out += "\n\nThis program was brought to you by Yu Inc.";

        results.setText(out);
    }//GEN-LAST:event_goButtonActionPerformed

    private void go2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_go2ActionPerformed
        // TODO add your handling code here:
        String in = "";

        for (int i = 0; i < 50; i++) {
            int freq = 0;
            try {
                if (data2.getModel().getValueAt(i, 1) != null) {
                    freq = Integer.parseInt(data2.getModel().getValueAt(i, 1).toString());
                    for (int j = 0; j < freq; j++) {
                        if (data2.getModel().getValueAt(i, 0) != null) {
                            in += data2.getModel().getValueAt(i, 0).toString();
                            in += " ";
                        }
                    }
                }
            } catch (NumberFormatException e) {
            }
        }

        in = in.replaceAll("[^0-9-.]+", " ");
        in = in.replaceAll("\\s+", " ");
        in = in.trim();

        String[] listString = in.split(" ");
        double[] list = new double[listString.length];

        for (int i = 0; i < list.length; i++) {
            double num;
            try {
                num = Double.parseDouble(listString[i]);
                list[i] = num;
            } catch (NumberFormatException e) {
            }
        }

        Arrays.sort(list);
        // all methods require sorting

        double meanNums = mean(list);
        double medianNums = median(list);
        double[] modeNums = mode(list);
        String spreadNums = spread(list);
        double rangeNums = range(list);
        double q1Nums = q1(list);
        double q3Nums = q3(list);
        double iqrNums = iqr(list);
        double outlierMinNums = outlierMin(list);
        double outlierMaxNums = outlierMax(list);
        double[] outlierNums = outliers(list);

        String out = "[";
        for (int i = 0; i < list.length; i++) {
            out += list[i];
            if (i < list.length - 1) {
                out += ", ";
            }
        }
        out += "]\n";

        out += ("n = " + list.length);

        out += ("\n\nCENTER\n");
        out += String.format("Mean: %.2f\n", meanNums);
        out += String.format("Median: %.2f\n", medianNums);
        if (modeNums.length == 0) {
            out += "There is no mode";
        } else if (modeNums.length == 1) {
            out += "Mode:";
        } else {
            out += "Modes:";
        }
        for (int i = 0; i < modeNums.length; i++) {
            out += (" " + modeNums[i]);
            if (i < modeNums.length - 1) {
                out += ",";
            }
        }
        out += "\n\n";

        out += "SPREAD\n";
        out += (spreadNums + "\n");
        out += String.format("Range: %.2f\n", rangeNums);
        out += String.format("Q1: %.2f\n", q1Nums);
        out += String.format("Q3: %.2f\n", q3Nums);
        out += String.format("Interquartile Range: %.2f\n\n", iqrNums);

        out += "OUTLIERS\n";
        out += String.format("Outside of the interval [%.2f, %.2f]\n", outlierMinNums, outlierMaxNums);
        if (outlierNums.length == 0) {
            out += "There are no outliers";
        } else {
            out += "Outliers:";
        }
        for (int i = 0; i < outlierNums.length; i++) {
            out += (" " + outlierNums[i]);
            if (i < outlierNums.length - 1) {
                out += ",";
            }
        }
        out += "\n\nThis program was brought to you by Yu Inc.";

        results2.setText(out);
    }//GEN-LAST:event_go2ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(StatUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(StatUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(StatUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(StatUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new StatUI().setVisible(true);
            }
        });
    }

    public static double mean(double[] nums) {
        double sum = 0;
        if (nums.length > 0) {
            for (double num : nums) {
                sum += num;
            }
            return sum / nums.length;
        }
        return sum;
    }

    public static double median(double[] nums) {
        int mid = nums.length / 2;
        double median = nums[mid];
        if (nums.length % 2 == 0) {
            median = (median + nums[mid - 1]) / 2;
        }
        return median;
    }

    public static double[] mode(double[] nums) {
        List<Double> modes = new ArrayList<Double>();
        int maxCount = 0;
        for (int i = 0; i < nums.length; i++) {
            int count = 0;
            for (int j = 0; j < nums.length; j++) {
                if (nums[j] == nums[i]) {
                    count++;
                }
            }
            if (count > maxCount) {
                maxCount = count;
                modes.clear();
                modes.add(nums[i]);
            } else if ((count == maxCount) && (!modes.contains(nums[i]))) {
                modes.add(nums[i]);
            }
        }
        if (maxCount == 1) {
            modes.clear();
        }
        double[] modeArray = new double[modes.size()];
        for (int i = 0; i < modes.size(); i++) {
            modeArray[i] = modes.get(i);
        }

        return modeArray;
    }

    public static String spread(double[] nums) {
        double first = nums[0];
        double last = nums[nums.length - 1];
        return "Spread: " + first + " to " + last;
    }

    public static double range(double[] nums) {
        double first = nums[0];
        double last = nums[nums.length - 1];
        return (last - first);
    }

    public static double q1(double[] nums) {
        double quart1;
        if (nums.length == 1) {
            return nums[0];
        } else if (nums.length == 2) {
            return nums[0];
        } else if (nums.length == 3) {
            return nums[0];
        } else if (nums.length % 4 == 2) {
            return nums[(nums.length / 4)];
        } else if (nums.length % 4 == 0) {
            return (nums[(nums.length / 4)] + nums[(nums.length / 4) - 1]) / 2;
        } else if (nums.length % 4 == 3) {
            return nums[((nums.length + 1) / 4) - 1];
        } else {
            return (nums[(nums.length - 1) / 4] + nums[((nums.length - 1) / 4) - 1]) / 2;
        }
    }

    public static double q3(double[] nums) {
        double quart3;
        if (nums.length == 1) {
            return nums[0];
        } else if (nums.length == 2) {
            return nums[1];
        } else if (nums.length == 3) {
            return nums[2];
        } else if (nums.length % 4 == 2) {
            return nums[(nums.length / 4 * 3) + 1];
        } else if (nums.length % 4 == 0) {
            return (nums[(nums.length / 4 * 3)] + nums[(nums.length / 4 * 3) - 1]) / 2;
        } else if (nums.length % 4 == 3) {
            return nums[((nums.length + 1) / 4 * 3) - 1];
        } else {
            return (nums[(nums.length - 1) / 4 * 3] + nums[((nums.length - 1) / 4 * 3) + 1]) / 2;
        }
    }

    public static double iqr(double[] nums) {
        return q3(nums) - q1(nums);
    }

    public static double outlierMin(double[] nums) {
        return q1(nums) - 1.5 * iqr(nums);
    }

    public static double outlierMax(double[] nums) {
        return q3(nums) + 1.5 * iqr(nums);
    }

    public static double[] outliers(double[] nums) {
        List<Double> outs = new ArrayList<Double>();
        for (int i = 0; i < nums.length; i++) {
            if ((nums[i] < outlierMin(nums)) || (nums[i] > outlierMax(nums))) {
                outs.add(nums[i]);
            }
        }
        double[] outsArray = new double[outs.size()];
        for (int i = 0; i < outs.size(); i++) {
            outsArray[i] = outs.get(i);
        }

        return outsArray;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextArea data;
    private javax.swing.JTable data2;
    private javax.swing.JButton go2;
    private javax.swing.JButton goButton;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTextArea results;
    private javax.swing.JTextArea results2;
    private javax.swing.JTabbedPane tab;
    // End of variables declaration//GEN-END:variables
}
